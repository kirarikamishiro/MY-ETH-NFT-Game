{"ast":null,"code":"var _jsxFileName = \"/Users/hasamayoshihito/Documents/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js\",\n    _s = $RefreshSig$();\n\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\"; // フロントエンドにNFTキャラクターを表示するため、characterNFTのメタデータを渡します。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Arena = _ref => {\n  _s();\n\n  let {\n    characterNFT,\n    setCharacterNFT\n  } = _ref;\n  // コントラクトのデータを保有する状態変数を初期化します。\n  const [gameContract, setGameContract] = useState(null); // ボスのメタデータを保存する状態変数を初期化します。\n\n  const [boss, setBoss] = useState(null); // 攻撃の状態を保存する変数を初期化します。\n\n  const [attackState, setAttackState] = useState(\"\");\n  const [showToast, setShowToast] = useState(false); // NFTキャラクターがボスを攻撃する際に使用する関数を定義します。\n  // ボスを攻撃する関数を設定します。\n\n  const runAttackAction = async () => {\n    try {\n      // コントラクトが呼び出されたことを確認します。\n      if (gameContract) {\n        // attackState の状態を attacking に設定します。\n        setAttackState(\"attacking\");\n        console.log(\"Attacking boss...\"); // NFT キャラクターがボスを攻撃します。\n\n        const attackTxn = await gameContract.attackBoss(); // トランザクションがマイニングされるまで待ちます。\n\n        await attackTxn.wait();\n        console.log(\"attackTxn:\", attackTxn); // attackState の状態を hit に設定します。\n\n        setAttackState(\"hit\"); // 攻撃ダメージの表示をtrueに設定し（表示）、5秒後にfalseに設定する（非表示）\n\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error(\"Error attacking boss:\", error);\n      setAttackState(\"\");\n    }\n  }; // ページがロードされると下記が実行されます。\n  // ページがロードされると下記が実行されます。\n\n\n  useEffect(() => {\n    // ボスのデータをコントラクトから読み込む関数を設定します。\n    const fetchBoss = async () => {\n      //ボスのメタデータをコントラクトをから呼び出します。\n      const bossTxn = await gameContract.getBigBoss();\n      console.log(\"Boss:\", bossTxn); // ボスの状態を設定します。\n\n      setBoss(transformCharacterData(bossTxn));\n    }; // AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\n\n\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      // ボスの新しいHPを取得します。\n      const bossHp = newBossHp.toNumber(); // NFT キャラクターの新しいHPを取得します。\n\n      const playerHp = newPlayerHp.toNumber();\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`); // NFT キャラクターとボスのHPを更新します。\n\n      setBoss(prevState => {\n        return { ...prevState,\n          hp: bossHp\n        };\n      });\n      setCharacterNFT(prevState => {\n        return { ...prevState,\n          hp: playerHp\n        };\n      });\n    }; // コントラクトが呼び出されていたら、下記を実行します。\n\n\n    if (gameContract) {\n      fetchBoss(); // リスナーの設定：ボスが攻撃された通知を受け取ります。\n\n      gameContract.on(\"AttackComplete\", onAttackComplete);\n    } // コンポーネントがマウントされたら、リスナーを停止する。\n\n\n    return () => {\n      if (gameContract) {\n        gameContract.off(\"AttackComplete\", onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"arena-container\",\n    children: [boss && characterNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toast\",\n      className: showToast ? \"show\" : \"\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"desc\",\n        children: `💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), boss && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boss-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `boss-content  ${attackState}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\uD83D\\uDD25 \", boss.name, \" \\uD83D\\uDD25\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: boss.imageURI,\n            alt: `Boss ${boss.name}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"health-bar\",\n            children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n              value: boss.hp,\n              max: boss.maxHp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `${boss.hp} / ${boss.maxHp} HP`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attack-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button\",\n          onClick: runAttackAction,\n          children: `💥 Attack ${boss.name}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), attackState === \"attacking\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Attacking \\u2694\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), characterNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"players-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Character\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: characterNFT.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: characterNFT.imageURI,\n              alt: `Character ${characterNFT.name}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"health-bar\",\n              children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n                value: characterNFT.hp,\n                max: characterNFT.maxHp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: `${characterNFT.hp} / ${characterNFT.maxHp} HP`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: `⚔️ Attack Damage: ${characterNFT.attackDamage}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Arena, \"w2BVyTrIVYlNi0ttCgTtKbTdrh8=\");\n\n_c = Arena;\nexport default Arena;\n\nvar _c;\n\n$RefreshReg$(_c, \"Arena\");","map":{"version":3,"sources":["/Users/hasamayoshihito/Documents/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js"],"names":["LoadingIndicator","React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","Arena","characterNFT","setCharacterNFT","gameContract","setGameContract","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","console","log","attackTxn","attackBoss","wait","setTimeout","error","fetchBoss","bossTxn","getBigBoss","onAttackComplete","newBossHp","newPlayerHp","bossHp","toNumber","playerHp","prevState","hp","on","off","name","attackDamage","imageURI","maxHp"],"mappings":"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","sourcesContent":["import LoadingIndicator from \"../LoadingIndicator\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport \"./Arena.css\";\n// フロントエンドにNFTキャラクターを表示するため、characterNFTのメタデータを渡します。\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // コントラクトのデータを保有する状態変数を初期化します。\n  const [gameContract, setGameContract] = useState(null);\n  // ボスのメタデータを保存する状態変数を初期化します。\nconst [boss, setBoss] = useState(null);\n// 攻撃の状態を保存する変数を初期化します。\nconst [attackState, setAttackState] = useState(\"\");\nconst [showToast, setShowToast] = useState(false);\n// NFTキャラクターがボスを攻撃する際に使用する関数を定義します。\n// ボスを攻撃する関数を設定します。\nconst runAttackAction = async () => {\n    try {\n      // コントラクトが呼び出されたことを確認します。\n      if (gameContract) {\n        // attackState の状態を attacking に設定します。\n        setAttackState(\"attacking\");\n        console.log(\"Attacking boss...\");\n  \n        // NFT キャラクターがボスを攻撃します。\n        const attackTxn = await gameContract.attackBoss();\n  \n        // トランザクションがマイニングされるまで待ちます。\n        await attackTxn.wait();\n        console.log(\"attackTxn:\", attackTxn);\n  \n        // attackState の状態を hit に設定します。\n        setAttackState(\"hit\");\n  \n        // 攻撃ダメージの表示をtrueに設定し（表示）、5秒後にfalseに設定する（非表示）\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error(\"Error attacking boss:\", error);\n      setAttackState(\"\");\n    }\n  };\n\n// ページがロードされると下記が実行されます。\n// ページがロードされると下記が実行されます。\nuseEffect(() => {\n    // ボスのデータをコントラクトから読み込む関数を設定します。\n    const fetchBoss = async () => {\n      //ボスのメタデータをコントラクトをから呼び出します。\n      const bossTxn = await gameContract.getBigBoss();\n      console.log(\"Boss:\", bossTxn);\n      // ボスの状態を設定します。\n      setBoss(transformCharacterData(bossTxn));\n    };\n  \n    // AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      // ボスの新しいHPを取得します。\n      const bossHp = newBossHp.toNumber();\n      // NFT キャラクターの新しいHPを取得します。\n      const playerHp = newPlayerHp.toNumber();\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n  \n      // NFT キャラクターとボスのHPを更新します。\n      setBoss((prevState) => {\n        return { ...prevState, hp: bossHp };\n      });\n      setCharacterNFT((prevState) => {\n        return { ...prevState, hp: playerHp };\n      });\n    };\n  \n    // コントラクトが呼び出されていたら、下記を実行します。\n    if (gameContract) {\n      fetchBoss();\n      // リスナーの設定：ボスが攻撃された通知を受け取ります。\n      gameContract.on(\"AttackComplete\", onAttackComplete);\n    }\n  \n    // コンポーネントがマウントされたら、リスナーを停止する。\n    return () => {\n      if (gameContract) {\n        gameContract.off(\"AttackComplete\", onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n\n  \n  return (\n    <div className=\"arena-container\">\n      {/* 攻撃ダメージの通知を追加します */}\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n      {/* ボスをレンダリングします */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content  ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {/* Attack ボタンの下にローディングマークを追加します*/}\n          {attackState === \"attacking\" && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n      {/* NFT キャラクター をレンダリングします*/}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"active-players\">\n            <h2>Active Players</h2>\n            <div className=\"players-list\">{renderActivePlayersList()}</div>\n          </div> */}\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Arena;"]},"metadata":{},"sourceType":"module"}