{"ast":null,"code":"var _jsxFileName = \"/Users/hasamayoshihito/Documents/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null); // Minting の状態保存する状態変数を初期化します。\n\n  const [mintingCharacter, setMintingCharacter] = useState(false); // NFT を Mint します。\n\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        // Mint が開始されたら、ローディングマークを表示する。\n        setMintingCharacter(true);\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn); // Mint が終了したら、ローディングマークを消す。\n\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error); // エラーが発生した場合も、ローディングマークを消す。\n\n      setMintingCharacter(false);\n    }\n  }; // ページがロードされた瞬間に下記を実行します。\n\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer); // gameContract の状態を更新します。\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n  useEffect(() => {\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\"); // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn); // すべてのNFTキャラクターのデータを変換します。\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); // ミント可能なすべてのNFTキャラクターの状態を設定します。\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    }; // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加します。\n\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`); // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド）に移動するための状態に設定します。\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n        alert(`NFT キャラクーが Mint されました -- リンクはこちらです: https://rinkeby.rarible.com/token/${gameContract.address}:${tokenId.toNumber()}?tab=details`);\n      }\n    };\n\n    if (gameContract) {\n      getCharacters(); // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\n\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      // コンポーネントがマウントされたら、リスナーを停止する。\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]); // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://cloudflare-ipfs.com/ipfs/${character.imageURI}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\",\n      onClick: mintCharacterNFTAction(index),\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 3\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), mintingCharacter && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"indicator\",\n        children: [/*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Minting In Progress...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectCharacter, \"YAIluGJumFDmJAPdOeDT94pTudM=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["/Users/hasamayoshihito/Documents/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js"],"names":["LoadingIndicator","React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","console","log","mintTxn","mintCharacterNFT","wait","error","warn","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","onCharacterMint","sender","tokenId","characterIndex","toNumber","characterNFT","checkIfUserHasNFT","alert","address","on","off","renderCharacters","character","index","name","imageURI","length"],"mappings":"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","sourcesContent":["import LoadingIndicator from \"../../Components/LoadingIndicator\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n\n// Minting の状態保存する状態変数を初期化します。\nconst [mintingCharacter, setMintingCharacter] = useState(false);\n\n  // NFT を Mint します。\nconst mintCharacterNFTAction = (characterId) => async () => {\n  try {\n    if (gameContract) {\n      // Mint が開始されたら、ローディングマークを表示する。\n      setMintingCharacter(true);\n\n      console.log(\"Minting character in progress...\");\n      const mintTxn = await gameContract.mintCharacterNFT(characterId);\n      await mintTxn.wait();\n      console.log(\"mintTxn:\", mintTxn);\n      // Mint が終了したら、ローディングマークを消す。\n      setMintingCharacter(false);\n    }\n  } catch (error) {\n    console.warn(\"MintCharacterAction Error:\", error);\n    // エラーが発生した場合も、ローディングマークを消す。\n    setMintingCharacter(false);\n  }\n};\n  // ページがロードされた瞬間に下記を実行します。\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      // gameContract の状態を更新します。\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  useEffect(() => {\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\");\n  \n        // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n  \n        console.log(\"charactersTxn:\", charactersTxn);\n  \n        // すべてのNFTキャラクターのデータを変換します。\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n  \n        // ミント可能なすべてのNFTキャラクターの状態を設定します。\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    };\n  \n    // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加します。\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n      // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド）に移動するための状態に設定します。\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n        alert(\n          `NFT キャラクーが Mint されました -- リンクはこちらです: https://rinkeby.rarible.com/token/${\n            gameContract.address\n          }:${tokenId.toNumber()}?tab=details`\n        );\n      }\n    };\n  \n    if (gameContract) {\n      getCharacters();\n      // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n  \n    return () => {\n      // コンポーネントがマウントされたら、リスナーを停止する。\n  \n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\nconst renderCharacters = () =>\ncharacters.map((character, index) => (\n  <div className=\"character-item\" key={character.name}>\n    <div className=\"name-container\">\n      <p>{character.name}</p>\n    </div>\n    <img src={`https://cloudflare-ipfs.com/ipfs/${character.imageURI}`} />\n    <button\n      type=\"button\"\n      className=\"character-mint-button\"\n      onClick={mintCharacterNFTAction(index)}\n    >{`Mint ${character.name}`}</button>\n  </div>\n));\n\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* mintingCharacter = trueの場合のみ、ローディングマークを表示します。*/}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n};\nexport default SelectCharacter;\n"]},"metadata":{},"sourceType":"module"}