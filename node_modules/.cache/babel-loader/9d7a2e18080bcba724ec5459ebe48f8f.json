{"ast":null,"code":"var _jsxFileName = \"/Users/hasamayoshihito/Documents/ETH-NFT-game/nft-game-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\nimport Arena from \"./Components/Arena\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\"; // SelectCharacter に入っているファイルをインポートします。\n\nimport SelectCharacter from \"./Components/SelectCharacter\"; // Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"あなたのTwitterハンドル\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null); // characterNFT と setCharacterNFT を初期化します。\n\n  const [characterNFT, setCharacterNFT] = useState(null); // ロード状態を初期化します。\n\n  const [isLoading, setIsLoading] = useState(false); // ユーザーがRinkeby Network に接続されているか確認します。\n  // '4' は Rinkeby のネットワークコードです。\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"4\") {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ユーザーがMetaMaskを持っているか確認します。\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\"); // 次の行でreturnを使用するため、ここでisLoadingを設定します。\n\n        setIsLoading(false);\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum); // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n\n        const accounts = await ethereum.request({\n          method: \"eth_accounts\"\n        }); // もしアカウントが一つでも存在したら、以下を実行。\n\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account); // currentAccountにユーザーのアカウントアドレスを格納\n\n          setCurrentAccount(account);\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    } //すべての関数ロジックの後に、state プロパティを解放します。\n\n\n    setIsLoading(false);\n  }; // レンダリングメソッド\n\n\n  const renderContent = () => {\n    // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/yMocj5x.png\",\n          alt: \"Pikachu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this); // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、\"SelectCharacter Component\" を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 12\n      }, this); // シナリオ3.\n      // ーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っている場合、\n      // Area でボスと戦います。\n    } else if (currentAccount && characterNFT) {\n      return /*#__PURE__*/_jsxDEV(Arena, {\n        characterNFT: characterNFT,\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this);\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"MetaMask を ダウンロードしてください!\");\n        return;\n      } // ユーザーがウォレットを持っているか確認します。\n\n\n      checkIfWalletIsConnected(); // ウォレットアドレスに対してアクセスをリクエストしています。\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // ウォレットアドレスを currentAccount に紐付けます。\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // ユーザーが Rinkeby に接続されているか確認します。\n\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n    }; // 接続されたウォレットがある場合のみ、下記を実行します。\n\n\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]); // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n  useEffect(() => {\n    // ページがロードされたら、即座にロード状態を設定するようにします。\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []); // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      } // ユーザーが保持しているNFTの確認が完了したら、ロード状態を false に設定します。\n\n\n      setIsLoading(false);\n    };\n  }, [currentAccount]);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"header gradient-text\",\n            children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"sub-text\",\n            children: \"\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u3068\\u5354\\u529B\\u3057\\u3066\\u30DC\\u30B9\\u3092\\u5012\\u305D\\u3046\\u2728\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), renderContent()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"Twitter Logo\",\n            className: \"twitter-logo\",\n            src: twitterLogo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"footer-text\",\n            href: TWITTER_LINK,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: `built with @${TWITTER_HANDLE}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(App, \"4d1/v0v+sQ55nWtyL/pUhMx0n98=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hasamayoshihito/Documents/ETH-NFT-game/nft-game-starter-project/src/App.js"],"names":["LoadingIndicator","Arena","myEpicGame","ethers","CONTRACT_ADDRESS","transformCharacterData","React","useEffect","useState","SelectCharacter","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","isLoading","setIsLoading","checkNetwork","window","ethereum","networkVersion","alert","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","renderContent","connectWalletAction","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","txn","checkIfUserHasNFT","name","twitterLogo"],"mappings":"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","sourcesContent":["import LoadingIndicator from \"./Components/LoadingIndicator\";\nimport Arena from \"./Components/Arena\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\n// SelectCharacter に入っているファイルをインポートします。\nimport SelectCharacter from \"./Components/SelectCharacter\";\n\n\n// Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\nconst TWITTER_HANDLE = \"あなたのTwitterハンドル\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null);\n  // characterNFT と setCharacterNFT を初期化します。\n  const [characterNFT, setCharacterNFT] = useState(null);\n  // ロード状態を初期化します。\nconst [isLoading, setIsLoading] = useState(false);\n\n\n\n  // ユーザーがRinkeby Network に接続されているか確認します。\n  // '4' は Rinkeby のネットワークコードです。\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"4\") {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ユーザーがMetaMaskを持っているか確認します。\nconst checkIfWalletIsConnected = async () => {\n  try {\n    const { ethereum } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask!\");\n\n      // 次の行でreturnを使用するため、ここでisLoadingを設定します。\n      setIsLoading(false);\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n\n      // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n      // （複数持っている場合も加味、よって account's' と変数を定義している）\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      // もしアカウントが一つでも存在したら、以下を実行。\n      if (accounts.length !== 0) {\n        // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n\n        // currentAccountにユーザーのアカウントアドレスを格納\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    }\n  } catch (error) {\n    console.log(error);\n  }\n  //すべての関数ロジックの後に、state プロパティを解放します。\n  setIsLoading(false);\n};\n\n// レンダリングメソッド\nconst renderContent = () => {\n  // シナリオ1.\n  // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n  if (!currentAccount) {\n    return (\n      <div className=\"connect-wallet-container\">\n        <img src=\"https://i.imgur.com/yMocj5x.png\" alt=\"Pikachu\" />\n        <button\n          className=\"cta-button connect-wallet-button\"\n          onClick={connectWalletAction}\n        >\n          Connect Wallet to Get Started\n        </button>\n      </div>\n    );\n    // シナリオ2.\n    // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、\"SelectCharacter Component\" を表示します。\n  } else if (currentAccount && !characterNFT) {\n    return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    // シナリオ3.\n    // ーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っている場合、\n    // Area でボスと戦います。\n  } else if (currentAccount && characterNFT) {\n    return<Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n  }\n};\n\n  // connectWallet メソッドを実装します。\nconst connectWalletAction = async () => {\n  try {\n    const { ethereum } = window;\n    if (!ethereum) {\n      alert(\"MetaMask を ダウンロードしてください!\");\n      return;\n    }\n\n    // ユーザーがウォレットを持っているか確認します。\n    checkIfWalletIsConnected();\n\n    // ウォレットアドレスに対してアクセスをリクエストしています。\n    const accounts = await ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n\n    // ウォレットアドレスを currentAccount に紐付けます。\n    console.log(\"Connected\", accounts[0]);\n    setCurrentAccount(accounts[0]);\n\n    // ユーザーが Rinkeby に接続されているか確認します。\n    checkNetwork();\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n  \n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n  \n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n    };\n  \n    // 接続されたウォレットがある場合のみ、下記を実行します。\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n\n// ページがロードされたときに useEffect()内の関数が呼び出されます。\nuseEffect(() => {\n\t// ページがロードされたら、即座にロード状態を設定するようにします。\n\tsetIsLoading(true);\n\tcheckIfWalletIsConnected();\n}, []);\n\n// ページがロードされたときに useEffect()内の関数が呼び出されます。\nuseEffect(() => {\n\t// スマートコントラクトを呼び出す関数です。\n\tconst fetchNFTMetadata = async () => {\n\t\tconsole.log('Checking for Character NFT on address:', currentAccount);\n\n\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\tconst signer = provider.getSigner();\n\t\tconst gameContract = new ethers.Contract(\n\t\tCONTRACT_ADDRESS,\n\t\tmyEpicGame.abi,\n\t\tsigner\n\t\t);\n\n\tconst txn = await gameContract.checkIfUserHasNFT();\n\tif (txn.name) {\n\t\tconsole.log('User has character NFT');\n\t\tsetCharacterNFT(transformCharacterData(txn));\n\t} else {\n\t\tconsole.log('No character NFT found');\n\t}\n\t// ユーザーが保持しているNFTの確認が完了したら、ロード状態を false に設定します。\n\tsetIsLoading(false);\n}\n}, [currentAccount]);\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }else{\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"header-container\">\n            <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\n            <p className=\"sub-text\">プレイヤーと協力してボスを倒そう✨</p>\n            {/* renderContent メソッドを呼び出します。*/}\n            {renderContent()}\n          </div>\n          <div className=\"footer-container\">\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`built with @${TWITTER_HANDLE}`}</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}