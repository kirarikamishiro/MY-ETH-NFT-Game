{"ast":null,"code":"var _jsxFileName = \"/Users/hasamayoshihito/Documents/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null); // ページがロードされた瞬間に下記を実行します。\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer); // gameContract の状態を更新します。\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n  useEffect(() => {\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\"); // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn); // すべてのNFTキャラクターのデータを変換します。\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); // ミント可能なすべてのNFTキャラクターの状態を設定します。\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    }; // gameContractの準備ができたら、NFT キャラクターを読み込みます。\n\n\n    if (gameContract) {\n      getCharacters();\n    }\n  }, [gameContract]); // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\" //onClick={mintCharacterNFTAction(index)}\n      ,\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 3\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SelectCharacter, \"ReBpEb1ZDzzSsIn8oOlkhmevdME=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["/Users/hasamayoshihito/Documents/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js"],"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","console","log","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","error","renderCharacters","character","index","name","imageURI","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n\n  // ページがロードされた瞬間に下記を実行します。\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      // gameContract の状態を更新します。\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  useEffect(() => {\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\");\n        // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n  \n        console.log(\"charactersTxn:\", charactersTxn);\n  \n        // すべてのNFTキャラクターのデータを変換します。\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n  \n        // ミント可能なすべてのNFTキャラクターの状態を設定します。\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    };\n    // gameContractの準備ができたら、NFT キャラクターを読み込みます。\n    if (gameContract) {\n      getCharacters();\n    }\n  }, [gameContract]);\n\n  // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\nconst renderCharacters = () =>\ncharacters.map((character, index) => (\n  <div className=\"character-item\" key={character.name}>\n    <div className=\"name-container\">\n      <p>{character.name}</p>\n    </div>\n    <img src={character.imageURI} alt={character.name} />\n    <button\n      type=\"button\"\n      className=\"character-mint-button\"\n      //onClick={mintCharacterNFTAction(index)}\n    >{`Mint ${character.name}`}</button>\n  </div>\n));\n\nreturn (\n  <div className=\"select-character-container\">\n    <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\n    {/* キャラクターNFTがフロントエンド上で読み込めている際に、下記を表示します*/}\n    {characters.length > 0 && (\n      <div className=\"character-grid\">{renderCharacters()}</div>\n    )}\n  </div>\n);\n};\nexport default SelectCharacter;\n"]},"metadata":{},"sourceType":"module"}